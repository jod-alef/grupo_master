# Generated by Django 5.1.4 on 2024-12-15 18:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Empresa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('logo', models.ImageField(upload_to='logos')),
            ],
        ),
        migrations.CreateModel(
            name='Soldador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('cpf', models.CharField(max_length=11)),
                ('sinete', models.CharField(max_length=10)),
            ],
            options={
                'verbose_name': 'Soldador',
                'verbose_name_plural': 'Soldadores',
            },
        ),
        migrations.CreateModel(
            name='Operador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('setor', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='raqs.empresa')),
            ],
            options={
                'verbose_name': 'Operador',
                'verbose_name_plural': 'Operadores',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Raqs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lista_de_verificacoes', models.CharField(choices=[('1', "1 - Segue as regras básicas, segurança e utiliza corretamente os EPI's básicos e específicos"), ('2', '2 - Identifica corretamente os equipamentos e acessórios de soldagem apresentados'), ('3', '3 - Utiliza corretamente os equipamentos e acessórios de soldagem'), ('4', '4 - Segue corretamente as variáveis de soldagem determinadas na EPS'), ('5', '5 - Mantém um padrão uniforme e linear das camadas de solda'), ('6', '6 - Deposita o material em passes uniformes, mantendo um padrão linear'), ('7', '7 - Face (mordedura, poros, sobreposição, trinca, deposição insuficiente, reforço excessivo, abertura de arco, respingo'), ('8', '8 - Raiz (mordedura da raiz, falta de penetração, falta de fusão, perfuração, concavidade, penetração excessiva')], max_length=1)),
                ('soldador', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='raqs.soldador')),
            ],
        ),
        migrations.CreateModel(
            name='SolicitacaoCadastroSoldador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(auto_now=True)),
                ('eps', models.CharField(max_length=10)),
                ('norma_projeto', models.CharField(choices=[('ASME_I', 'ASME I - 2023'), ('ASME_VII', 'ASME VII Div.1/Div.2 - 2023'), ('ASME_B31-1', 'ASME B31.1 - 2022'), ('ASME_B31-3', 'ASME B31.3 - 2022'), ('ASME_B31-4', 'ASME B31.4 - 2022'), ('ASME_B31-8', 'ASME B31.8 - 2022'), ('API_620', 'API 620 - 2021'), ('API_650', 'API 650 - 2021'), ('AWS_D1-1', 'AWS D1.1 - 2022')], max_length=10)),
                ('processo_soldagem', models.CharField(choices=[('SMAW', 'Soldagem com eletrodo revestido'), ('GTAW', 'Soldagem TIG'), ('GMAW', 'Soldagem MIG'), ('FCAW', 'Soldagem com arame tubular')], max_length=4)),
                ('consumivel_spec', models.CharField(choices=[('SFA_5-1', 'SFA 5.1'), ('SFA_5-4', 'SFA 5.4'), ('SFA_5-5', 'SFA 5.5'), ('SFA_5-11', 'SFA 5.11'), ('SFA_5-18', 'SFA 5.18'), ('SFA_5-20', 'SFA 5.20')], max_length=15)),
                ('consumivel_classificacao', models.CharField(choices=[('E7018', 'E7018'), ('E6010', 'E6010'), ('E-71T-1', 'E-71T-1'), ('E-309', 'E-309'), ('E-312', 'E-312'), ('ER-70S-3', 'ER-70S-3'), ('ER-70S-6', 'ER-70S-6'), ('ER-309', 'ER-309')], max_length=8)),
                ('consumivel_diametro', models.CharField(choices=[('1.2', '1,2 mm'), ('3.2', '3,25 mm')], max_length=4)),
                ('metal_base_spec', models.CharField(choices=[('A-36', 'A-36 - Chapa AC'), ('A-106', 'A-106 - Tubo AC'), ('16MO3', '16MO3 - Tubo AC'), ('SB536', 'SB536 - Chapa Incoloy'), ('A-309', 'A-309 - Chapa'), ('A-312', 'A-312 - Chapa')], max_length=25)),
                ('meta_base_espessura', models.FloatField(choices=[('12.7', '12,7'), ('8.7', '8,7')], max_length=4)),
                ('metal_base_diametro', models.CharField(choices=[('8', '8"'), ('2', '2"')], max_length=4)),
                ('posicao_soldagem', models.CharField(choices=[('1G', '1G - Plana'), ('2G', '2G - Horizontal'), ('3G', '3G - Vertical'), ('4G', '4G - Sobre-Cabeça'), ('5G', '5G - Vertical'), ('6G', '6G - Inclinado 45º'), ('1F', '1F - Plana'), ('2F', '2F - Horizontal'), ('3F', '3F - Vertical'), ('4F', '4F - Sobre-Cabeça')], max_length=4)),
                ('posicao_soldagem_progressao', models.CharField(choices=[('ASCENDENTE', 'Ascendente'), ('DESCENDENTE', 'Descendente')], max_length=25)),
                ('cobre_junta', models.BooleanField()),
                ('gas_protecao', models.CharField(choices=[], max_length=10)),
                ('purga', models.BooleanField()),
                ('modo_transferencia', models.CharField(choices=[('CURTO_CIRCUITO', 'Curto Circuito'), ('GLOBULAR', 'Globular'), ('SPRAY', 'Spray')], max_length=15)),
                ('ensaio', models.CharField(choices=[], max_length=10)),
                ('cp_number', models.CharField(blank=True, editable=False, max_length=15)),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='raqs.empresa')),
                ('soldador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='raqs.soldador')),
            ],
        ),
        migrations.CreateModel(
            name='EnsaioUltrassom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_teste', models.DateField(auto_now=True)),
                ('aprovado', models.BooleanField()),
                ('solicitacao', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='raqs.solicitacaocadastrosoldador')),
            ],
            options={
                'verbose_name': 'Ensaio Ultrassom',
                'verbose_name_plural': 'Ensaios Ultrassom',
            },
        ),
        migrations.CreateModel(
            name='EnsaioMecanicoDobramento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_teste', models.DateField(auto_now=True)),
                ('fotos_amostra_1', models.FileField(upload_to='media/')),
                ('fotos_amostra_2', models.FileField(upload_to='media/')),
                ('fotos_amostra_3', models.FileField(upload_to='media/')),
                ('aprovado', models.BooleanField()),
                ('solicitacao', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='raqs.solicitacaocadastrosoldador')),
            ],
            options={
                'verbose_name': 'Ensaio Mecânico',
                'verbose_name_plural': 'Ensaios Mecânicos',
            },
        ),
    ]
